// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Doctor
  Admin
}

enum Gender {
  male
  female
}

enum MessageType {
  Info
  Warning
  Error
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String
  surname String
  telephone String?
  birthday DateTime
  isEmailVerified Boolean @default(false)
  avatarUrl String?
  gender Gender
  password String
  customer Customer[]
  staff Staff[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerificationToken EmailVerificationToken[]
  sentNotifications Notifications[] @relation("Sender")
  receivedNotifications Notifications[] @relation("Receiver")
}

model EmailVerificationToken {
  id String @id @default(uuid())
  token String @unique
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model Customer {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointments[]
  updatedAt DateTime @updatedAt
}

model Staff {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  specializationId String?
  specialization Specialization? @relation(fields: [specializationId], references: [id], onDelete: SetNull)
  experience Float?
  description String? @db.VarChar(1000)
  room Int?
  role Role @default(Doctor)
  schedule Schedule[]
  scheduleExceptions ScheduleException[]
  appointments Appointments[]
  updatedAt DateTime @updatedAt
}

model Specialization {
  id String @id @default(uuid())
  title String
  staff Staff[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id String @id @default(uuid())
  staffId String
  dayOfWeek Int
  from Int?
  to Int?
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model ScheduleException {
  id String  @id @default(uuid())
  staffId String
  date DateTime
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Appointments {
  id String @id @default(uuid())
  staffId String
  customerId String
  dateTime DateTime
  isCompleted Boolean @default(false)
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id String @id @default(uuid())
  receiverId String
  senderId String
  message String
  isRead Boolean
  type MessageType @default(Info)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
}
