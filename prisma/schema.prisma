// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Customer
  Staff
  Admin
}

enum Gender {
  male
  female
}

model Customer {
  id String @id @default(uuid())
  email String @unique
  name String
  surname String
  telephone String?
  avatarUrl String?
  birthday DateTime
  password String
  gender Gender @default(male)
  appointments Appointments[]
}

model Staff {
  id String @id @default(uuid())
  email String @unique
  name String
  surname String
  telephone String?
  avatarUrl String?
  specializationId String?
  specialization Specialization? @relation(fields: [specializationId], references: [id], onDelete: SetNull)
  birthday DateTime
  gender Gender
  password String
  experience Float?
  description String? @db.VarChar(1000)
  room Int?
  role Role @default(Staff)
  schedule Schedule[]
  appointments Appointments[]
}

model Specialization {
  id String @id @default(uuid())
  title String
  staff Staff[]
}

model Schedule {
  id String @id @default(uuid())
  staffId String
  dayOfWeek Int
  startTime Int?
  endTime Int?
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Appointments {
  id String @id @default(uuid())
  staffId String
  customerId String
  dateTime DateTime
  isCompleted Boolean @default(false)
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}